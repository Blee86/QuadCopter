//
//  FanControl.cpp
//  FanControl
//
//  Created by Yosub Lee on 7/23/14.
//  Copyright (c) 2014 Yosub Lee. All rights reserved.
//

#include "FanControl.h"

/**
Constructor
*/
FanControl::FanControl(int BAUD_RATE) {
	logging = false;
	running = false;
	
	this->BAUD_RATE = BAUD_RATE;
	sampleRate = 1.25;	//in milliseconds
	baseSpeed = 1400;
	maxSpeed = baseSpeed + 150;
	minSpeed = baseSpeed - 150;
	// Initialize
	initVN100();
	initFanController();
	pid_X = new PID();
	pid_Y = new PID();
	pid_Z = new PID();
	
	// default setting for PID
	pid_X->setPoint(0);
	pid_Y->setPoint(0);
	pid_Z->setPoint(0);
	pid_X->setGains(0.01, 0.005, 0.003);
	pid_Y->setGains(0.01, 0.005, 0.003);
	pid_Z->setGains(0.01, 0.005, 0.003);
	
	// I guess we need Log all the time..
	loggingOn();
	
}

/**
destructor
*/
FanControl::~FanControl() {
	finishLogging();
	running = false;
	pidThread.join();
	pidThread.detach();
	delete Log;
	delete pid_X;
	delete pid_Y;
	delete ypr;
	delete vn100;
	delete fanController;
	delete motorController;
}

/*
Initialize. VN100 (AHRS)
*/
void FanControl::initVN100() {
	const char *COM_PORT = "/dev/ttyUSB0";
	vn100 = new Vn100();
	if ( vn100_connect(vn100, COM_PORT, BAUD_RATE) == VNERR_PERMISSION_DENIED) {
		printf("Current user does not have permission to open the COM port.\n");
		printf("Try running again using 'sudo'.\n");
	}		
	else {
		cout << "[VN100] Initialized." << endl;
	}
}

/*
Initialize Motor Controller
*/
void FanControl::initFanController() {
	string pololuPath = "/dev/ttyACM";
	
	int postFix = 0;
	
	while(postFix < 10){
		string newPath = pololuPath + to_string(postFix);
		if (open(newPath.c_str(), O_RDWR | O_NONBLOCK) > 0) {
			pololuPath = newPath;
			break;
		}
		postFix++;
	}
	
	cout << "pololu is at " << pololuPath << endl;
	motorController = new PololuMaestroMotorController(12, pololuPath.c_str());
	fanController = new FanController(motorController);
}

/*
Set Log on
Log file will be saved in 'Log' folder.
*/
void FanControl::loggingOn() {
	time_t timer;
	char buffer[25];
	struct tm* tm_info;
	
	time(&timer);
	tm_info = localtime(&timer);
	
	strftime(buffer, 25, "./Log/%Y_%m_%H_%M_%S", tm_info);
	Log = new ofstream(buffer, ios::out);
	
	*Log << "Pitch,Roll,Yaw,Pid_output_X,pid_output_Y,pid_output_Z\n";
	logging = true;	
}

void FanControl::finishLogging() {
	if (logging == true) 
		Log->close();	
}

/*
Writes log of AHRS and PID output
*/
void FanControl::writeLog() {
	*Log << ypr->pitch << "," << ypr->roll << "," << ypr->yaw << "," <<
	m_outputX << "," << m_outputY << "," << m_outputZ << "\n";
}

/*
Run the Motor channel from 0 to 5.
*/
void FanControl::setMotorSpeedAll(int speed) {
	fanController->setSpeed(speed, 0);
	usleep(50000);
	fanController->setSpeed(speed, 1);
	usleep(50000);
	fanController->setSpeed(speed, 2);
	usleep(50000);
	fanController->setSpeed(speed, 3);
	usleep(50000);
	fanController->setSpeed(speed, 4);
	usleep(50000);
	fanController->setSpeed(speed, 5);
	usleep(50000);
}

void FanControl::computePID() {
	m_outputX = pid_X->compute(ypr->pitch);
	m_outputY = pid_Y->compute(ypr->roll);
	m_outputZ = pid_Z->compute(ypr->yaw);	
}

/*
Apply new pid values and adjust speed of the motors
*/
void FanControl::setMotorSpeed() {
	int speedX_3 = baseSpeed - m_outputX;
	int speedX_4 = baseSpeed + m_outputX;
	int speedY_1 = baseSpeed + m_outputY;
	int speedY_2 = baseSpeed - m_outputY;
	
	if ( speedY_1 > maxSpeed ) speedY_1 = maxSpeed;
	if ( speedY_1 < minSpeed ) speedY_1 = minSpeed;
	
	if ( speedY_2 > maxSpeed ) speedY_2 = maxSpeed;
	if ( speedY_2 < minSpeed ) speedY_2 = minSpeed;
	
	if ( speedX_3 > maxSpeed ) speedX_3 = maxSpeed;
	if ( speedX_3 < minSpeed ) speedX_3 = minSpeed;
	
	if ( speedX_4 > maxSpeed ) speedX_4 = maxSpeed;
	if ( speedX_4 < minSpeed ) speedX_4 = minSpeed;
	
	fanController->setSpeed(speedY_1, 1);
	fanController->setSpeed(speedY_2, 2);
	
	fanController->setSpeed(speedX_3, 0);
	fanController->setSpeed(speedX_4, 3);	
	
}
void FanControl::controlMotors() {
	while(running){
		m_now = chrono::high_resolution_clock::now();
		float timeDiff = (chrono::duration_cast<chrono::milliseconds>(m_now-m_lastTime).count())/1000.0f;
		if ( timeDiff > sampleRate ) {
			if (vn100_getYawPitchRoll(vn100, ypr) != 0) break;
			
			computePID();
			setMotorSpeed();
			writeLog();
			m_lastTime = m_now;
		}
	}
	
}


void FanControl::start() {
	// Setting Menu
	int input = 1;
	cout << "Test Motors\n";
	
	while(1) {
		setMotorSpeedAll(1600);
		cout << "1 == Again?, else = exit\n";
		cin >> input;
		cout << endl;
		if ( input != 1 ) break;
	}
	input = 0;
	cout << "\nDo you want to set PID values?\n1.yes otherwise, use default values\n";
	cin >> input;
	if ( input == 1)
		setPID();
	running = true;
	// Run Thread
	pidThread = std::thread(&FanControl::controlMotors, this);
}

void FanControl::setPidGainsX(int p, int i, int d) {
	pid_X->setGains(p,i,d);
	cout << "[PID_X, Pitch] PID gains = " << p << " " << i << " " << d << endl;
}

void FanControl::setPidGainsY(int p, int i, int d) {
	pid_Y->setGains(p,i,d);
	cout << "[PID_Y, Roll] PID gains = " << p << " " << i << " " << d << endl;
}

void FanControl::setPointPidX(int point) {
	pid_Y->setPoint(point);
	cout << "[PID_X, Pitch] the Point is set to - "<< point << endl;
}

void FanControl::setPointPidY(int point) {
	pid_Y->setPoint(point);
	cout << "[PID_Y, Roll] the Point is set to - "<< point << endl;
}

void FanControl::setOutputLimitsX(int min, int max) {
	pid_X->setOutputLimits(min, max);
	cout << "[PID_X, Pitch] Output Low/High = "<< min << " " << max << endl;
}

void FanControl::setOutputLimitsY(int min, int max) {
	pid_X->setOutputLimits(min, max);
	cout << "[PID_Y, Roll] Output Low/High = "<< min << " " << max << endl;
}

void FanControl::setPID() {
	int min, max, goal, p,i,d;
	cout << "\n \t [PID setup: X-axis Pitch]\n";
	cout << "1. Set output Limits\n";
	cout << "Max: ";
	cin  >> max;
	cout << "\nMin: ";
	cin >> min;
	cout << "\n2. Set Point";
	cout << "\nset Point: ";
	cin >> goal;
	cout << "\n3. Set P,I,D gains";
	cout << "\nP gain: ";
	cin >> p;
	cout << "\nI gain: ";
	cin >> i;
	cout << "\nD gain: ";
	cin >> d;
	setOutputLimitsX(min, max);
	setPidGainsX(p,i,d);
	setPointPidX(goal);
	cout << "\nDo you want to set the same PID for PID_Y (Roll) ?\n 1.Yes / Otherwise.No";
	int option;
	cin >> option;
	
	if (option != 1) {
		cout << "\n \t [PID setup: Y-axis Roll]\n";
		cout << "1. Set output Limits\n";
		cout << "Max: ";
		cin  >> max;
		cout << "\nMin: ";
		cin >> min;
		cout << "\n2. Set Point";
		cout << "\nset Point: ";
		cin >> goal;
		cout << "\n3. Set P,I,D gains";
		cout << "\nP gain: ";
		cin >> p;
		cout << "\nI gain: ";
		cin >> i;
		cout << "\nD gain: ";
		cin >> d;
	}
	setOutputLimitsY(min, max);
	setPidGainsY(p,i,d);
	setPointPidY(goal);
}

void FanControl::stop() {
	running = false;
}
